### UI ###
Window.Datacontext
	<ViewModel:MainViewModel/>
	+ namespace  xmlns:Folder="clr-namespace:ProjectName.Folder" x:Class="ProjectName.class"
Window.Resources
	<Converter:BoolToBrushConverter x:Key="BoolToBrushConverter"/>
Grid
	Grid.RowDefinitions
		RowDefinition Height - definiert Höhe der 1. Row
		Rowdefinition Height - definiert Höhe der 2. Row
	StackPanel Grid.Row="0"
		Label 
		Textbox Text="{Binding NewTaskDescription}" - UI mit MainViewModel verbinden
		Button Content="Button-Text" Command="{Binding AddBtnClickedCommand}" - UI mit MainViewModel verbinden
	StackPanel Grid.Row="1"
		Datagrid ItemsSource="{Binding ToDoList}" - UI mit MainViewModel verbinden
			Datagrid.Columns - before: AutoGenerateColumns="False" on Datagrid
		...
		
### Model ###
class with properties used in e.g. Datagrid
	public String Description {get; set;}
	+ constructor public nameofclass() {...}

### ViewModels ###
classes logic what should happen 
	ObservableCollection-list to store properties e.g. ToDoList
	class for button RelayCommand e.g. AddBtnClickedCommand + RaisePropertyChanged() in setter
	class for pass properties, so view is not accessing model directly e.g.ToDoVM
	new BitmapImage(new Uri("Images/icon.jpg", UriKind.Relative))
	
### Button ###
event EventHandler ICommand.CanExecuteChanged
{ add 
	{
	CommandManager.RequerySuggested += value; ...	

### Server-Client ###
New Socket
	AddressFamily.InterNetwork
	SocketType.Stream
	ProtocolType.Tcp
socket.Bind
	new IPEndPoint (IPAddress.Loopback, 8055)
socket.Listen(5)
socket.Accept() // to accept client socket on server
socket.send(Enconding.ASCII.GetBytes(message)) // send data
socket.receive // to receive on server from a client, call method incl receive in main program