###### XAML ######
using CommonServiceLocator; //Microsoft.Practices.ServiceLocation;
aus Locator rauskopieren: DataContext="{Binding Source={StaticResource Locator}, Path=ViewModelName}"

###### XAML LIST TEMPLATES ######
<ListBox Grid.Column="1" ItemsSource="{Binding Items}">
	<ListBox.ItemTemplate>
		<DataTemplate>
			<Border Height="70" Width="200" BorderBrush="Blue" BorderThickness="2" CornerRadius="4">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="50"></ColumnDefinition>
						<ColumnDefinition Width="*"></ColumnDefinition>
						<ColumnDefinition Width="50"></ColumnDefinition>
					</Grid.ColumnDefinitions>
					<Image Source="{Binding Image}"></Image>
					<StackPanel Grid.Column="1" Margin="3">
						<Label Content="{Binding Description}"></Label>
						<Label Content="{Binding NoOfParts}"></Label>
					</StackPanel>
					...
	<ListBox.ItemsPanel>
		<ItemsPanelTemplate>
			<StackPanel Orientation="Horizontal"></StackPanel>
		</ItemsPanelTemplate>
	</ListBox.ItemsPanel>

###### CONVERTER ######
<Window.Resources>
	<Converter:BoolToBrushConverter x:Key="BoolToBrushConverter"></Converter:BoolToBrushConverter>

class BoolToBrushConverter : IValueConverter
{
	static Brush green = new SolidColorBrush(Colors.Green);
	static Brush orange = new SolidColorBrush(Colors.OrangeRed);

	public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
	{
		bool temp = (bool)value; //casten
		if (temp) {return green;}
		return orange;
	}

	public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
	{ throw new NotImplementedException();}
}
//xaml
<StackPanel VerticalAlignment="Center" Orientation="Horizontal" Margin="10">
	<Button Content="Toggle1" Height="25" Width="100" Margin="10" Command="{Binding ToggleBtnClickedCmd}" CommandParameter="1" Visibility="{Binding ActAsServer, Converter={StaticResource BoolToVisibilityConverter}}"></Button>
	<Ellipse Height="30" Width="30" Fill="{Binding Toggle1, Converter={StaticResource BoolToBrushConverter}}"></Ellipse>
</StackPanel>	
			
###### LIST with IMAGES ######
public ObservableCollection<LegoItemVm> Items { get; set; }
	public MainViewModel()
    {
		Items = new ObservableCollection<LegoItemVm>
		{
			new LegoItemVm("Digger", 300, "10+", new BitmapImage(new Uri("Images/bagger.jpg", UriKind.Relative))),
			new LegoItemVm("DeathStart", 500, "20+", new BitmapImage(new Uri("Images/todesstern.jpg", UriKind.Relative))),

//XAML
//<ListBox ItemsSource="{Binding Items}" DisplayMemberPath="Description"></ListBox>

###### MVVMLIGHT ######
DataContext="{Binding Source = {Static Resource Locator}, Path = Main}"

###### BUTTON MVVMLIGHT ######

private int clickCounter =0;
public int ClickCounter
{
	get { return clickCounter; }
	set { clickCounter = value; RaisePropertyChanged("ClickCounter"); }
}

RelayCommand clickBtnCommand;

public RelayCommand ClickBtnCommand
        {
            get { return clickBtnCommand;}
            set { clickBtnCommand = value;}
        }

public MainViewModel()
{
	ClickBtnCommand = new RelayCommand(new Action(ExecuteClickCount), new Func<bool>(CanExecuteClickCount));
	//ClickBtnCommand = new RelayCommand(ExecuteClickCount, ()=> { if (Text.Length > 3) { return true; } else { return false; } });
}

private bool CanExecuteClickCount()
{ return IsCLickable;}
private void ExecuteClickCount()
{ ClickCounter++;}

Command="{Binding ClickBtnCommand}"

###### TCP ######
// MainViewModel
private void MsgReceived(byte[] obj)
	{
		App.Current.Dispatcher.Invoke(() => 
            {
                Toggle1 = Convert.ToBoolean(obj[0]);
                History.Add("Toggle1: " + Toggle1 + "...");
				...
            });

###### TCP CLIENT ######
class Client
    {

        // Action brauche ich damit ich definiere was passiert wenn mal was daher kommt -> in MainViewModel gebe ich MsgReceived als Action mit
        Socket sock;
        private byte[] buffer = new byte[10];
        private Action<byte[]> informer; 

        public Client(Action<byte[]> informer)
        {
            this.informer = informer;
            TcpClient cl = new TcpClient();
            cl.Connect(new IPEndPoint(IPAddress.Loopback, 9090));
            sock = cl.Client;
            Task.Factory.StartNew(Receive);
        }

        private void Receive()
        {
            int length;
            while (true)
            {
                length = sock.Receive(buffer);
                byte[] temp = new byte[length];
                Array.Copy(buffer,temp,length);
                informer(temp);
            }
        }
    }
###### TCP SERVER ######
class Server
{
	private Socket socket;
	private List<Clienthandler> clients = new List<Clienthandler> ();

	public Server()
	{
		socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
		socket.Bind(new IPEndPoint(IPAddress.Loopback, 9090));
		socket.Listen(10); 
		Task.Factory.StartNew(AcceptClients);
	}

	public void AcceptClients()
	{
		while (true)
		{
			clients.Add(new Clienthandler(socket.Accept()));
		}
	}
	public void SendToAllClients(byte[] data)
	{
		foreach (var item in clients)
		{
			item.SendData(data);
		}
	}

###### TCP CLIENT-HANDLER ######	
internal class Clienthandler //internal nicht relevant - es geht nur darum wer die klasse verwenden kann
    {
        private Socket socket;

        public Clienthandler(Socket accept)
        {
            this.socket = accept;
        }

        public void SendData(byte[] data)
        {
            socket.Send(data);
        }
    }
###### RANDOM RAISEPROPERTY ######
static Random rand = new Random();
private int randomNumber = 100;
DispatcherTimer timer = new DispatcherTimer();     

public int RandomNumber
{
	get { return randomNumber; }
	set { randomNumber = value; RaisePropertyChanged();  }
}

public int CallerMemberName { get; private set; }
public MainViewModel()
{
	timer.Interval = new TimeSpan(0, 0, 3);
	timer.Tick += Timer_Tick;
	timer.Start();
   
}

private void Timer_Tick(object sender, EventArgs e)
{
	RandomNumber = rand.Next(0,100);
}

//XAML
<Label Content="Random Number" Margin="10" Height="25"/>
<TextBox  Margin="10" Height="25" Width="150" VerticalAlignment="Center" Text="{Binding RandomNumber}"/>

###### RELAYCOMMAND ######

public class RelayCommand : ICommand
{
	Action<object> execute;
	Func<oject, bool> canExecute;
	
	public RelayCommand(Func<oject, bool> canExecute, Action<object> execute)
	{
		this.execute = execute;
		this.canExecute = canExecute;
	}

public bool CanExecute(object parameter)
{ 	return can Execute(parameter);}

public void Execute(object parameter)
{ 
	if(canExecute(parameter))
	{ 	execute(parameter);	}
}

event EventHandler ICommand.CanExecuteChanged
{ 
	add { CommandManager.RequerySuggested += value; }
	remove { CommandManager.RequerySuggested -= value; }
}

private RelayCommand addBtnClickedCommand; //fullprop
private RelayCommand AddBtnClickedCommand
{
	get {return addBtnClickedCommand;}
	set {addBtnClickedCommand = value;}
}

Command="{Binding AddBtnClickedCommand}" //XAML
AddBtnClickedCommand = New RelayCommand(new Action (AddButtonClicked), new Func<object>(canExecute)); //Main
private bool CanExecute()
{
	return true;
}
private void AddButtonClicked()
{
	List.Add(...); //logic what happens when button is clicked
}
